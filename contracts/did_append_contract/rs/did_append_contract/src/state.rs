// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableString {
    pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableString {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_string(&self, index: u32) -> ScImmutableString {
        ScImmutableString::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct Immutabledid_append_contractState {
    pub(crate) proxy: Proxy,
}

impl Immutabledid_append_contractState {
    pub fn new() -> Immutabledid_append_contractState {
        Immutabledid_append_contractState {
            proxy: state_proxy(),
        }
    }

    pub fn d_id(&self) -> ArrayOfImmutableString {
        ArrayOfImmutableString { proxy: self.proxy.root(STATE_D_ID) }
    }

    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableString {
    pub(crate) proxy: Proxy,
}

impl ArrayOfMutableString {
    pub fn append_string(&self) -> ScMutableString {
        ScMutableString::new(self.proxy.append())
    }

    pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_string(&self, index: u32) -> ScMutableString {
        ScMutableString::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct Mutabledid_append_contractState {
    pub(crate) proxy: Proxy,
}

impl Mutabledid_append_contractState {
    pub fn new() -> Mutabledid_append_contractState {
        Mutabledid_append_contractState {
            proxy: state_proxy(),
        }
    }
    pub fn as_immutable(&self) -> Immutabledid_append_contractState {
        Immutabledid_append_contractState { proxy: self.proxy.root("") }
    }

    pub fn d_id(&self) -> ArrayOfMutableString {
        ArrayOfMutableString { proxy: self.proxy.root(STATE_D_ID) }
    }

    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.root(STATE_OWNER))
    }
}
