// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use did_append_contract::*;
use crate::*;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
        FUNC_ADD_DID,
        FUNC_DELETE_DID,
        FUNC_INIT,
        FUNC_SET_OWNER,
        FUNC_UPDATE_DID,
        VIEW_GET_DID,
        VIEW_GET_OWNER,
    ],
    funcs: &[
        func_add_did_thunk,
        func_delete_did_thunk,
        func_init_thunk,
        func_set_owner_thunk,
        func_update_did_thunk,
    ],
    views: &[
        view_get_did_thunk,
        view_get_owner_thunk,
    ],
};

pub fn on_dispatch(index: i32) {
    EXPORT_MAP.dispatch(index);
}

pub struct AddDidContext {
    pub params: ImmutableAddDidParams,
    pub state:  Mutabledid_append_contractState,
}

fn func_add_did_thunk(ctx: &ScFuncContext) {
    ctx.log("did_append_contract.funcAddDid");
    let f = AddDidContext {
        params: ImmutableAddDidParams::new(),
        state:  Mutabledid_append_contractState::new(),
    };
    ctx.require(f.params.new_did().exists(), "missing mandatory param: newDID");
    func_add_did(ctx, &f);
    ctx.log("did_append_contract.funcAddDid ok");
}

pub struct DeleteDidContext {
    pub params: ImmutableDeleteDidParams,
    pub state:  Mutabledid_append_contractState,
}

fn func_delete_did_thunk(ctx: &ScFuncContext) {
    ctx.log("did_append_contract.funcDeleteDid");
    let f = DeleteDidContext {
        params: ImmutableDeleteDidParams::new(),
        state:  Mutabledid_append_contractState::new(),
    };
    ctx.require(f.params.to_delete_did().exists(), "missing mandatory param: toDeleteDID");
    func_delete_did(ctx, &f);
    ctx.log("did_append_contract.funcDeleteDid ok");
}

pub struct InitContext {
    pub params: ImmutableInitParams,
    pub state:  Mutabledid_append_contractState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("did_append_contract.funcInit");
    let f = InitContext {
        params: ImmutableInitParams::new(),
        state:  Mutabledid_append_contractState::new(),
    };
    func_init(ctx, &f);
    ctx.log("did_append_contract.funcInit ok");
}

pub struct SetOwnerContext {
    pub params: ImmutableSetOwnerParams,
    pub state:  Mutabledid_append_contractState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
    ctx.log("did_append_contract.funcSetOwner");
    let f = SetOwnerContext {
        params: ImmutableSetOwnerParams::new(),
        state:  Mutabledid_append_contractState::new(),
    };

    let access = f.state.owner();
    ctx.require(access.exists(), "access not set: owner");
    ctx.require(ctx.caller() == access.value(), "no permission");

    ctx.require(f.params.owner().exists(), "missing mandatory param: owner");
    func_set_owner(ctx, &f);
    ctx.log("did_append_contract.funcSetOwner ok");
}

pub struct UpdateDidContext {
    pub params: ImmutableUpdateDidParams,
    pub state:  Mutabledid_append_contractState,
}

fn func_update_did_thunk(ctx: &ScFuncContext) {
    ctx.log("did_append_contract.funcUpdateDid");
    let f = UpdateDidContext {
        params: ImmutableUpdateDidParams::new(),
        state:  Mutabledid_append_contractState::new(),
    };
    ctx.require(f.params.to_update_did().exists(), "missing mandatory param: toUpdateDID");
    ctx.require(f.params.value().exists(), "missing mandatory param: value");
    func_update_did(ctx, &f);
    ctx.log("did_append_contract.funcUpdateDid ok");
}

pub struct GetDIDContext {
    pub params:  ImmutableGetDIDParams,
    pub results: MutableGetDIDResults,
    pub state:   Immutabledid_append_contractState,
}

fn view_get_did_thunk(ctx: &ScViewContext) {
    ctx.log("did_append_contract.viewGetDID");
    let f = GetDIDContext {
        params:  ImmutableGetDIDParams::new(),
        results: MutableGetDIDResults::new(),
        state:   Immutabledid_append_contractState::new(),
    };
    ctx.require(f.params.index().exists(), "missing mandatory param: index");
    view_get_did(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("did_append_contract.viewGetDID ok");
}

pub struct GetOwnerContext {
    pub results: MutableGetOwnerResults,
    pub state:   Immutabledid_append_contractState,
}

fn view_get_owner_thunk(ctx: &ScViewContext) {
    ctx.log("did_append_contract.viewGetOwner");
    let f = GetOwnerContext {
        results: MutableGetOwnerResults::new(),
        state:   Immutabledid_append_contractState::new(),
    };
    view_get_owner(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("did_append_contract.viewGetOwner ok");
}
